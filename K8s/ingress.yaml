# Frontend Ingress
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: frontend-ingress
  namespace: sidita-v3
  # annotations:
  #   nginx.ingress.kubernetes.io/proxy-body-size: "0"
  annotations:
    traefik.ingress.kubernetes.io/router.tls: "true"
    cert-manager.io/cluster-issuer: letsencrypt-prod
  labels:
    tier: frontend
spec:
  ingressClassName: traefik
  tls:
    - hosts:
        - app.sidita.id
      secretName: app-cert-frontend
  rules:
    - host: app.sidita.id
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: nextjs-sidita-service
                port:
                  number: 3000
# Backend Ingress
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: backend-ingress
  namespace: sidita-v3
  annotations:
    # nginx.ingress.kubernetes.io/proxy-body-size: "0"
    # nginx.ingress.kubernetes.io/cors-allow-origin: "https://app.sidita.id"
    # nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, OPTIONS"
    # nginx.ingress.kubernetes.io/cors-allow-headers: "Authorization, Content-Type"
    # nginx.ingress.kubernetes.io/cors-expose-headers: "Authorization"
    # nginx.ingress.kubernetes.io/rewrite-target: /$2
    traefik.ingress.kubernetes.io/router.tls: "true"
    traefik.ingress.kubernetes.io/cors-allow-origin: "https://app.sidita.id"
    traefik.ingress.kubernetes.io/cors-allow-methods: "GET, POST, OPTIONS"
    traefik.ingress.kubernetes.io/cors-allow-headers: "Authorization, Content-Type"
    traefik.ingress.kubernetes.io/cors-expose-headers: "Authorization"
    cert-manager.io/cluster-issuer: letsencrypt-prod
  labels:
    tier: backend
spec:
  ingressClassName: traefik
  tls:
    - hosts:
        - api.sidita.id
      secretName: app-cert-backend
  rules:
    - host: api.sidita.id
      http:
        paths:
        - pathType: Prefix
          path: /auth/
          backend:
            service:
              name: auth-service
              port:
                number: 8080
        - pathType: Prefix
          path: /project/
          backend:
            service:
              name: project-service
              port:
                number: 8081
        - pathType: Prefix
          path: /dashboard/
          backend:
            service:
              name: dashboard-service
              port:
                number: 8083

# ArgoCD Ingress
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: argocd-server-ingress
  namespace: argocd
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/app-root: /login
    cert-manager.io/acme-challenge-type: http01
    nginx.ingress.kubernetes.io/ssl-passthrough: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
spec:
  ingressClassName: nginx
  rules:
  - host: argocd.sidita.id # Replace with your domain
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: argocd-server
            port:
              name: https
  tls:
  - hosts:
    - argocd.sidita.id # Replace with your domain
    secretName: argocd.cert